7/7/14
goal: find a project
Today I decided on a project, drew mockups, collected the earthquake and tsunami DB's from USGS and NOAA.

7/8/14
goal: make a 3d globe with three.js, get realtime data source for earthquakes/tsunamis, created my own DB(currently sqlite, in the future postgres), get higher quality images and limit zoom distance
-I'll have to scrape the NOAA site for tsunami live updates, but I can use the USGS API to get GeoJSON for quakes.
- I created DB and tables before running seed.py by doing the following:
    python -i model.py
    engine = create_engine("sqlite:///ratings.db", echo=True)
    Base.metadata.create_all(engine)

7/9/14
goal: plot 2d data on sphere
Three js was giving me problems implementing a cube mat layer over the globe (maybe due to my blog post I used as an example having a different version from my copy?), and the error has to do with no material list being passed into MeshFaceMaterial, for future debugging purposes. I will try the Google Data Arts Team's globe for now to get an MVP working and come back to implementing my own globe if there is time. I also decided I will use a Flask web socket to connect with USGS and make live updates every minute.

7/10/14
goal: plot data on Google Data Arts Team WebGL Globe- be able to select vectors, d3 to display data from DB? 
My concern today is being able to make GET requests when clicking on the cubes that the globe generates. Stackoverflow says I need to implement a raycaster to make three js objects clickable. 
turnout- I'm moving to 2d with d3.js- much better support for geodata.

7/11/14
goal: plot historical data on d3 map
d3 has a different style of programming from what I'm used to- declarative, not imperative (e.g. the .enter() method, callbacks with d instead of for loops). I found a good example of a project I want mine to end up similar to - realtime data reported back with blinking circles. I want to see the JSON they pass and better understand the .data() and .datum().
.data computes a join (declaratively adds new elts, however many are in the array passed to it). It associates the data at each elt to the __data__ property of each new HTML elt created. .datum does not perform join- use when you expect no dynamic updates.

7/12/14
goal: plot historical data on d3 map
DONE finally. Also got tectonic plates on the map. Next step is the timeline slider.
I'd like to explore the orthographic projection/make an interactive globe the user can drag to spin. 

7/13/14
Day of rest. Read a little about timelines and basic d3 stuff. Started to implement timeline. I plan to focus just on earthquakes with a timeline and realtime updates for my MVP.

7/14/14
goal: implement timeline slider
I found a nice looking plugin (github/turban) for a timeline slider. I'll only show only 500 years of data on the slider due to num pixels/screen width and sliding limitations (skips values when sliding fast).
TO READ:
https://gist.github.com/thiyagaraj/8804699, http://stackoverflow.com/questions/5223/length-of-javascript-object-ie-associative-array

7/15/14
goal: make points plot correcly as user drags slider
This was not so hard to get working, but what was hard was 
+ making sure the points don't redraw if the slider is slid forward then backward 
+ making sure points don't display cumulatively (erase data in points array when slider is moved again PLUS erase points already drawn).
Implementing a feature that seems so simple can have more problems associated with it than I realized.
Better strategy: plot all points on map load but hide them; show only when slider is on whatever value
I had to call the func to plot the points inside the d3.json func that draws the map to get the drawing order right (points on top).
I added the var circles = svg.selectAll("circle") to improve performance (less DOM searching).

7/16/14
goal: see quake info when hovering over point, add realtime earthquakes
hierarchy in DOM matters/where labels are defined. I ended up defining the labels in the same func where I create the points to make sure labels are always superimposed. 
The creator of d3 says:
In SVG, the element order determines z-order: elements are drawn in the order they are specified in the document, so later elements will be drawn on top of earlier elements.
There are several ways you can change the ordering of elements:
Add the circles after the rectangles, rather than before.
Use D3's insert operator to insert the rectangles before the circle.
Create one svg:g element to hold the circles, and another for the rectangles.
Use D3's sort operator to reorder the elements.

There was also an issue with the label disappearing too quickly over a point due to the buffer size for the point being too small. I fixed this by making the label a little further away from the origin of the circle on the y-axis.

For the realtime data, I will use Flask-SocketIO.
Could use CORS proxy if USGS site doesn't have open enough sharing. - no need

7/17/14 
Negotiation workshop
Also met w a mentor to discuss FE vs BE and get ideas. Geolocating search that zooms to one fixed zoom level would be cool. Circles will need to be resized and labels could be added.

7/18/14
goal: get realtime data/web socket set up
justification for using web socket: not abusing USGS service- all clients load data through socket which pings USGS every 10 sec.
Background thread will sleep, make request, broadcast/draw points only if new earthquakes published (saves bandwidth).
socket.io documentation recommends sending an explicit package upon connection; this is specially important when using the global namespace.

7/19-20/2014
Went to D3 workshop at Zipfian Academy
We made charts and a map with pointRadius objects at the centroids of each state showing the number of crimes committed by category.
Talked about enter, append, exit model; scales; transforms; narrative structure (beginning is author driven then user driven)

Big takeaways for my project:
Put as many handlers and styles in CSS as possible- faster than JS, can control selections with class names- see classed() in D3
Circles' radii should use the Math.sqrt() function
Fading in or out (initial fill #eee); grow and shrink; ease(cubic) transition for polished product

follow mbostock's blog
will read about callback hell and "promises" to deal with displaying json files after all data loaded

Since I can get all my historical data in geojson, and the new data comes in geojson, it would be nice to use 1 func to put any data in DB. Is redis a good idea?

7/21/2014
goal: finish new updates/socket stuff
Disk space cheaper than cpu so it's fine to have all diff magnitudes as fields in DB and some null rather than 1 magnitude pruned for a master magnitude field.
Don't need to worry about memcached for now bc I don't have a lot of data and am not concerned w scaling right now.
Ended up rewriting DB schema to be make new data from USGS and historical data consistent.

7/22/2014
visit to Heroku - learned how to migrate DB to Postgres and deploy app (see Google notes)

In my app, I need to translate an epoch timestamp to m/d/y. Doing this with negative timestamps is harder in python than js (32 bit vs 64 bit integer precision). Javascript can readily handle around 285,616 years on either side of the 1970 epoch. Better reason to use js for converting epoch to m/d/y is that python datetime objects != js'.

Mousing over some points on map to see info doesn't always produce text.
Changed point radii size to better reflect shaking amplitude differences between magnitudes.
New data is only for 1900 and on- only showing quakes since 1900

1906 SF earthquake displays one month too early- investigate-- added 1 to month, and recent data looks good.

7/23/2014
goal: finish displaying new data and storing it in db if M >= 6 or an update to a quake in the db has occured
Moved mousemove functionality inside mouseover event handler- this was slowing computer down a ton.
Got the new points displayed, but a lot of code is repeated. Will get a code review with Giovanna tomorrow. Also added styling today.
Still need to get data writing to db properly.

7/24/2014
goal: add tooltip (custom version)

websocket is broken- also thinking of storing new points in db so it's ok if usgs goes down
code review by Giovanna: can add a few functions

in css: 
give each elt a class, don't refer by elt type
css reset
make buttons divs to avoid rectangular shadow- also easier to style

7/24/2014
TODO: fix socket, get data writing to db properly (include smaller mags), fix css, refactor to have more funcs, add tooltip, add filter by mag

Major refactoring today. Feels good man. 
Data writing to db or updating if already in db. Need memcached bc right now every single data point is updated every time new report is released, and db is being read from/written to directly. Started exploring redis:
    Map/dict/hashmap => everything is a key-value pair
    Data smart => values are not completely opaque. Redis offers support for integers, strings, list and recently maps. There is support for additional operations on values depending on their type. 
    Persistent => the key â€“ value pairs are not in memory only (nb: there are more details about how Redis is working.)
    Highly optimized => see the numbers mentioned in the article. Plus you could consult the docs for additional operations and see their O.

Socket working- needed @socketio.on handler
Added .exit().remove() to recent points drawing function to get rid of data older than 1 week (not in newest report)
Need to figure out why the following did not work:
    changing tickFormat on slider
    adding transition to recent quake circles as they draw (breaks the mouseover handler)

7/25/2014
goal: filter by magnitude working

fixed commas on years in slider (changed tickFormat and moved a paren of the d3.svg.axis function)
problem: recent points disappear every time a new report comes in- fixed by calling displayRecentPoints() inside createRecentPoints- consequence is new points appear on page load BUT also appear when historical points on if new report comes in
Adding this:
if (! d3.selectAll(".point").classed("hidden")) { displayRecentPoints(); } 
makes all recent and historical pts disppear when new report comes in but not if slider is displaying a certain year's points

7/26-27/2014
days off

7/28/2014
goal: make new reports actually display points after deleting those from old report, add labels

historical points are no longer disappearing when new reports come in - forgot what i changed there. Added a refreshPoints function to handle drawing new reports - thanks to this site: http://pothibo.com/2013/09/d3-js-how-to-handle-dynamic-json-data/
other relevant notes - transition, enter and exit are separated since those three methods are not chainable. Separation helps readability.
Newsvg is 0 by 0- investigate why - changed this to svg with a class.
Succesfully added tooltip- was easier to use mouse position (after adding mouse event handler) than getting x,y of circles. Added years above slider handle with tooltip div technique. Need reponsive design because I'm using a constant margin-top on the slider tooltip.
Noticed some magnitudes aren't corresponding to correct color- used Math.floor() to fix.
watched Douglas Crockford videos on JS
key ideas:
loose typing
objects as general containers
prototypical inheritance
lambda (funcs as first class citizens)
linkage thru global vars- global window object- use IFEE to avoid destruction, no block scope
don't use eval

7/29/2014
goal: add zoom and potentially draggable globe view, get filter by magnitude working

A note about d3 - to add 2 classes, don't use .attr twice but instead separate w spaces: .attr("class", "newPoint circle")
Circles for filter by magnitude drawn and spaced well.
Zoom- http://bl.ocks.org/mbostock/4987520- try leaving out overlay

Talked with laura about having a buffer function on slider to group several mousemove pts together- could use underscore.js's debounce func (only executes every x amt of time). talked about front end mvc and backbone, angular and react.

could use a func to format data such that circles are grouped by magnitude. Code is heavily repeated- could make a func to make legend/do filtering
do i want all circles in legend or circles from all dates to be displayed when legend circle clicked? yellow and orange are overwhelming- consider adding smaller quakes from past and not showing 2,3 magnitudes bc theyre only in North America. Maybe the circles filters should only be for recent events.

filter circles are not turning off slider data

7/30/2014
goal: label legend, add zoom, add refresh function to db quakes, center content w margin left/right auto

Centering done. Added handler for window resize to dynamically calculate position of slider-tooltip (anchored to bottom right of map). This felt like a lot of work for something that didn't seem it would be difficult at first. Hiding slider tooltip when any filter clicked.
Refactored circle filter creating.

7/31/2014
goal: implement redis, add zoom, add refresh function to db quakes


LATER:

-- optimize js performance- move scripts to end of body
look into caching http://betterexplained.com/articles/how-to-optimize-your-site-with-http-caching/
https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Tips_for_authoring_fast-loading_HTML_pages
slider should have buffer to group several mouse pts together

-- use an IFEE

-- filter by magnitude

-- redis w a timeout every hour OR when new data is written to DB; script to connect to redis
check if key exists:
if not set it
second run should display key
set timeout (1 min) - test expiration

-- zoom functionality

-- Need to test handling when USGS is down

-- make slider faster (more DOM manip = less performant)

-- CSS
give each elt a class, don't refer by elt type
css reset
make buttons divs to avoid rectangular shadow- also easier to style

Extras

-- Could inclue "place" in label and time for recent quakes
-- use queue to async load: https://github.com/mbostock/queue
-- orthographic projection and interactive globe(drag and zoom) - the points would need their clipping param adjusted
-- migrate to postgres
-- deploy on heroku

FOR FUNSIES:
finish Eloquent JS